<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="share.king.dao.TradeRecordMapper">

    <select id="selectAll" resultType="share.king.entity.TradeRecord">
        select *
        from trade_record
    </select>

    <select id="selectByCondition" resultType="share.king.entity.TradeRecord">
        select * from trade_record where 1=1 and user_id = #{userId}
        <if test='code != null and code != ""'>
            and code = #{code}
        </if>
        <if test="startDate != null">
            and buy_time > #{startDate,jdbcType=TIMESTAMP}
        </if>
        <if test="endDate != null">
            and #{endDate,jdbcType=TIMESTAMP} > buy_time
        </if>
        <if test='profit != null and profit != ""'>
            <choose>
                <when test='profit == "Y"'>
                    and sell_price > buy_price
                </when>
                <when test='profit == "N"'>
                    and sell_price &lt; buy_price
                </when>
                <otherwise>

                </otherwise>
            </choose>
        </if>
        <if test='name != null and name != ""'>
            and name like CONCAT('%',#{name},'%')
        </if>
        <if test='alias != null and alias != ""'>
            and alias like CONCAT('%',#{alias},'%')
        </if>
        <if test="asc != null">
            <choose>
                <when test='asc == "Y"'>
                    order by buy_time
                </when>
                <when test='asc == "N"'>
                    order by buy_time desc
                </when>
                <otherwise>
                </otherwise>
            </choose>
        </if>
    </select>

    <update id="updateBatch" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update trade_record
            <set>
                <if test="item.name != null">
                    name = #{item.name,jdbcType=VARCHAR},
                </if>
                <if test="item.alias != null">
                    alias = #{item.alias,jdbcType=VARCHAR},
                </if>
                <if test="item.code != null">
                    code = #{item.code,jdbcType=VARCHAR},
                </if>
                <if test="item.userId != null">
                    user_id = #{item.userId,jdbcType=INTEGER},
                </if>
                <if test="item.buyTime != null">
                    buy_time = #{item.buyTime,jdbcType=TIMESTAMP},
                </if>
                <if test="item.buyPrice != null">
                    buy_price = #{item.buyPrice,jdbcType=INTEGER},
                </if>
                <if test="item.buyCount != null">
                    buy_count = #{item.buyCount,jdbcType=INTEGER},
                </if>
                <if test="item.sellTime != null">
                    sell_time = #{item.sellTime,jdbcType=TIMESTAMP},
                </if>
                <if test="item.sellPrice != null">
                    sell_price = #{item.sellPrice,jdbcType=INTEGER},
                </if>
                <if test="item.openPrice != null">
                    open_price = #{item.openPrice,jdbcType=INTEGER},
                </if>
                <if test="item.closePrice != null">
                    close_price = #{item.closePrice,jdbcType=INTEGER},
                </if>
                <if test="item.highPrice != null">
                    high_price = #{item.highPrice,jdbcType=INTEGER},
                </if>
                <if test="item.lowPrice != null">
                    low_price = #{item.lowPrice,jdbcType=INTEGER},
                </if>
                <if test="item.remark != null">
                    remark = #{item.remark,jdbcType=VARCHAR},
                </if>
                <if test="item.idea != null">
                    idea = #{item.idea,jdbcType=VARCHAR},
                </if>
                <if test="item.dayTrend != null">
                    day_trend = #{item.dayTrend,jdbcType=VARCHAR},
                </if>
                <if test="item.createDate != null">
                    create_date = #{item.createDate,jdbcType=TIMESTAMP},
                </if>
            </set>
            where id = #{item.id,jdbcType=INTEGER}
        </foreach>
    </update>

    <insert id="insertBatch" parameterType="java.util.List">
        insert into trade_record
        (id, name, alias, code, user_id, buy_time, buy_price, buy_count, sell_time, sell_price, open_price, close_price,
        high_price, low_price, create_date, state)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.id,jdbcType=INTEGER}, #{item.name,jdbcType=VARCHAR}, #{item.alias,jdbcType=VARCHAR},
            #{item.code,jdbcType=VARCHAR}, #{item.userId,jdbcType=INTEGER}, #{item.buyTime,jdbcType=TIMESTAMP},
            #{item.buyPrice,jdbcType=INTEGER}, #{item.buyCount,jdbcType=INTEGER}, #{item.sellTime,jdbcType=TIMESTAMP},
            #{item.sellPrice,jdbcType=INTEGER}, #{item.openPrice,jdbcType=INTEGER}, #{item.closePrice,jdbcType=INTEGER},
            #{item.highPrice,jdbcType=INTEGER}, #{item.lowPrice,jdbcType=INTEGER},
            #{item.createDate,jdbcType=TIMESTAMP},
            #{item.state,jdbcType=INTEGER}
            )
        </foreach>
    </insert>

    <select id="getTotalGroupByDate" resultType="share.king.dto.trade.StatisticsDayBuy">
        select  count(1) as total,day,DAYOFWEEK(day) as weekDay from (select name,code,buy_price,buy_time,sell_price,sell_time,date_format(buy_time, '%Y-%m-%d') as day from trade_record where user_id = #{userId}) t group by t.day order by day
    </select>

    <select id="getTotalByBuyCount" resultType="share.king.dto.trade.StatisticsDayBuy">
         select total,code,name from (select count(1) total, code, name from trade_record where user_id = #{userId} group by code, name) t order by total desc
    </select>

    <select id="getTopBottomProfit" resultType="share.king.dto.trade.StatisticsDayBuy">
        select (sum(sell_price) - sum(buy_price)) / 10 as profit, code, name
        from trade_record
        where user_id = #{userId} and sell_price is not null
        <if test='code != null and code != ""'>
            and code = #{code}
        </if>
        <if test='name != null and name != ""'>
            and name like CONCAT('%',#{name},'%')
        </if>
        and buy_price is not null
        group by code, name
        order by profit
        <if test='desc != null and desc != ""'>
            desc
        </if>
    </select>

    <select id="getProfitCompare" resultType="share.king.dto.trade.StatisticsDayBuy">
        select count(1) as total ,profitState from (select profit, case when profit > 0 then 1 when profit = 0 then 0 else -1 end profitState
        from (select (sell_price - buy_price) as profit from trade_record where sell_price is not null and sell_time is not null and  user_id = #{userId} order by profit) t ) t1 group by profitState order by profitState
    </select>

    <select id="getKeepDuration" resultType="share.king.dto.trade.StatisticsDayBuy">
        select name, code, time_to_sec(timediff(sell_time, buy_time)) / 60 / 60 / 24 as keep
        from trade_record
        where sell_time is not null
        and buy_time is not null
        and user_id = #{userId}
        <if test='name != null and name != ""'>
            and name like CONCAT('%',#{name},'%')
        </if>
        <if test='code != null and code != ""'>
            and code = #{code}
        </if>
        order by keep
        <if test='desc != null and desc != ""'>
            desc
        </if>
    </select>
</mapper>